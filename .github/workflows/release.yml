name: Build and Auto-Release HEX

on:
  push:
    branches:
      - main
    paths:
      - 'include/**'
      - 'lib/**'
      - 'src/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: pip install platformio
      
      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "latest_tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          fi

      - name: Calculate next available version
        id: next_version
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          if [[ $tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            major=1
            minor=0
            patch=0
          fi
          found=1
          while [ $found -eq 1 ]; do
            next_tag="v${major}.${minor}.0"
            if git ls-remote --tags origin | grep -q "refs/tags/${next_tag}"; then
              minor=$((minor+1))
              if [ "$minor" -ge 10 ]; then
                major=$((major+1))
                minor=0
              fi
            else
              found=0
            fi
          done
          echo "next_tag=$next_tag" >> $GITHUB_OUTPUT

      
      - name: Write version header
        run: |
          echo "#ifndef VERSION_H" > include/version.h
          echo "#define VERSION_H" >> include/version.h
          echo "#define RELEASE_VERSION \"${{ steps.next_version.outputs.next_tag }}\"" >> include/version.h
          echo "#endif" >> include/version.h

      - name: Build HEX files
        run: platformio run

      - name: Find HEX files
        run: |
          mkdir -p hexfiles
          find .pio/build -name "*.hex" -exec cp {} hexfiles/ \;

      
      - name: Create new tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          if ! git ls-remote --tags origin | grep -q "refs/tags/${{ steps.next_version.outputs.next_tag }}"; then
            git tag ${{ steps.next_version.outputs.next_tag }}
            git push origin ${{ steps.next_version.outputs.next_tag }}
          else
            echo "Tag ${{ steps.next_version.outputs.next_tag }} already exists, skipping tag creation."
          fi
      

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.next_version.outputs.next_tag }}
          name: Release ${{ steps.next_version.outputs.next_tag }}
          files: hexfiles/*.hex
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}